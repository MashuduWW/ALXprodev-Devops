#!/bin/bash

# List of Pokémon
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
base_url="https://pokeapi.co/api/v2/pokemon"
error_log="errors.txt"
timeout=10  # Max seconds allowed per fetch

> "$error_log"  # Clear error log

# Function to fetch Pokémon data
fetch_pokemon() {
  name="$1"
  status=$(curl -s -w "%{http_code}" -o "${name}.json" "${base_url}/${name}")
  if [ "$status" -ne 200 ]; then
    echo "[$(date)] Failed to fetch $name (status $status)" >> "$error_log"
    rm -f "${name}.json"
  fi
}

# Launch background processes and store their PIDs
declare -A pid_map

for name in "${pokemon_list[@]}"; do
  echo "Fetching $name..."
  fetch_pokemon "$name" &
  pid_map["$name"]=$!
done

# Monitor and handle long-running processes
for name in "${!pid_map[@]}"; do
  pid=${pid_map[$name]}
  
  # Wait with timeout
  SECONDS=0
  while kill -0 "$pid" 2>/dev/null; do
    if [ "$SECONDS" -ge "$timeout" ]; then
      echo "⛔ Timeout reached for $name (PID $pid). Killing..."
      kill "$pid"
      echo "[$(date)] Timeout: $name process killed (PID $pid)" >> "$error_log"
      rm -f "${name}.json"
      break
    fi
    sleep 1
  done
done

echo "✅ All fetches completed or terminated if stuck."
